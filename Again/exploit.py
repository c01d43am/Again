import os
import subprocess
import sys

def check_and_install_sqlmap():
    """Checks if sqlmap is installed. Installs it if not found."""
    try:
        result = subprocess.run("which sqlmap", shell=True, capture_output=True)
        if result.returncode == 0:
            print("sqlmap is already installed.")
            return True
        else:
            print("sqlmap is not installed. Installing now...")
            os.system("git clone https://github.com/sqlmapproject/sqlmap.git ~/sqlmap")
            print("sqlmap has been installed successfully.")
            return True
    except Exception as e:
        print(f"Failed to install sqlmap: {e}")
        return False


def run_sqlmap(target_url):
    """Runs sqlmap to perform SQL injection testing on the target URL."""
    print(f"\nRunning sqlmap on {target_url}...")

    # Ensure Python is available
    python_path = subprocess.run("which python3", shell=True, capture_output=True, text=True).stdout.strip()
    if not python_path:
        print("Python3 is not installed or not in the PATH. Please install Python3.")
        return

    try:
        command = f"{python_path} ~/sqlmap/sqlmap.py -u {target_url} --batch --risk=3 --level=5"
        subprocess.run(command, shell=True, check=True)
        print(f"sqlmap scan completed for {target_url}.")
    except subprocess.CalledProcessError as e:
        print(f"Failed to run sqlmap on {target_url}: {e}")
    except Exception as e:
        print(f"An unexpected error occurred while running sqlmap: {e}")


def check_and_install_xsstrike():
    """Checks if XSStrike is installed. Installs it if not found."""
    try:
        result = subprocess.run("which xsstrike", shell=True, capture_output=True)
        if result.returncode == 0:
            print("XSStrike is already installed.")
            return True
        else:
            print("XSStrike is not installed. Installing now...")
            os.system("git clone https://github.com/s0md3v/XSStrike.git ~/XSStrike")
            # Create a virtual environment and install dependencies
            print("Creating a virtual environment for XSStrike...")
            subprocess.run("python3 -m venv ~/XSStrike/venv", shell=True, check=True)
            subprocess.run("~/XSStrike/venv/bin/pip install -r ~/XSStrike/requirements.txt", shell=True, check=True)
            print("XSStrike has been installed successfully in the virtual environment.")
            return True
    except Exception as e:
        print(f"Failed to install XSStrike: {e}")
        return False


def run_xsstrike(target_url):
    """Runs XSStrike to check for XSS vulnerabilities on the target URL."""
    print(f"\nRunning XSStrike on {target_url}...")

    # Ensure Python is available
    python_path = subprocess.run("which python3", shell=True, capture_output=True, text=True).stdout.strip()
    if not python_path:
        print("Python3 is not installed or not in the PATH. Please install Python3.")
        return

    try:
        # Run XSStrike using the virtual environment
        command = f"~/XSStrike/venv/bin/python ~/XSStrike/xsstrike.py -u {target_url} --crawl 2"
        subprocess.run(command, shell=True, check=True)
        print(f"XSStrike scan completed for {target_url}.")
    except subprocess.CalledProcessError as e:
        print(f"Failed to run XSStrike on {target_url}: {e}")
    except Exception as e:
        print(f"An unexpected error occurred while running XSStrike: {e}")


def injection_tool_menu():
    """Tool menu to choose between SQL Injection or XSS testing."""
    while True:
        print("\nInjection Tool Menu:")
        print("1. Run SQL Injection Test (sqlmap)")
        print("2. Run XSS Vulnerability Test (XSStrike)")
        print("3. Return to Main Menu\n")

        choice = input("Enter your choice [1-3]: ")
        if choice == "1":
            target_url = input("Enter the target URL for SQL Injection test (including http/https): ")
            if target_url:
                if check_and_install_sqlmap():  # Ensure sqlmap is installed
                    run_sqlmap(target_url)  # Run sqlmap for SQL injection testing
            else:
                print("Invalid URL. Please try again.")
        elif choice == "2":
            target_url = input("Enter the target URL for XSS Vulnerability test (including http/https): ")
            if target_url:
                if check_and_install_xsstrike():  # Ensure XSStrike is installed
                    run_xsstrike(target_url)  # Run XSStrike for XSS testing
            else:
                print("Invalid URL. Please try again.")
        elif choice == "3":
            print("Returning to Main Menu.")
            break
        else:
            print("Invalid choice, please try again.")
        print()


if __name__ == "__main__":
    injection_tool_menu()
